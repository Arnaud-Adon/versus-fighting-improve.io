// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  Sheet              Sheet[]
  Filter             Filter[]
  FightingGameOnUser FightingGameOnUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Sheet {
  id           String       @id @default(ulid())
  title        String
  content      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  fightingGame FightingGame @relation(fields: [fightingGameId], references: [id])

  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  filter           Filter[]
  CharacterOnSheet CharacterOnSheet[]
  OpponentOnSheet  OpponentOnSheet[]
  fightingGameId   String

  @@map("sheet")
}

model Filter {
  id        String   @id @default(ulid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Sheet   Sheet?  @relation(fields: [sheetId], references: [id])
  sheetId String?

  @@map("filter")
}

model FightingGame {
  id                 String               @id @default(ulid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  characters         Character[]
  Sheet              Sheet[]
  FightingGameOnUser FightingGameOnUser[]

  @@map("fighting_game")
}

model Character {
  id        String   @id @default(ulid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fightingGameId   String
  fightingGame     FightingGame       @relation(fields: [fightingGameId], references: [id])
  CharacterOnSheet CharacterOnSheet[]
  OpponentOnSheet  OpponentOnSheet[]

  @@map("character")
}

model CharacterOnSheet {
  id          String @id @default(ulid())
  characterId String
  sheetId     String

  character Character @relation(fields: [characterId], references: [id])
  sheet     Sheet     @relation(fields: [sheetId], references: [id])

  @@unique([sheetId, characterId])
}

model OpponentOnSheet {
  id         String @id @default(ulid())
  opponentId String
  sheetId    String

  opponent Character @relation(fields: [opponentId], references: [id])
  sheet    Sheet     @relation(fields: [sheetId], references: [id])

  @@unique([sheetId, opponentId])
}

model FightingGameOnUser {
  id             String @id @default(ulid())
  userId         String
  fightingGameId String

  user         User         @relation(fields: [userId], references: [id])
  fightingGame FightingGame @relation(fields: [fightingGameId], references: [id])
}
